// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: DiaryEntry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct DiaryEntryWrapper {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var version: Int32 = 0

    var diaryEntries: [DiaryEntry] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct DiaryEntry {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var location: String = String()

    var room: String = String()

    var venueType: DiaryEntry.VenueType = .other

    var checkinTime: UInt64 = 0

    var checkOutTime: UInt64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum VenueType: SwiftProtobuf.Enum {
        typealias RawValue = Int
        case other // = 0
        case meetingRoom // = 1
        case cafeteria // = 2
        case privateEvent // = 3
        case canteen // = 4
        case library // = 5
        case lectureRoom // = 6
        case shop // = 7
        case gym // = 8
        case kitchenArea // = 9
        case officeSpace // = 10
        case UNRECOGNIZED(Int)

        init() {
            self = .other
        }

        init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .other
            case 1: self = .meetingRoom
            case 2: self = .cafeteria
            case 3: self = .privateEvent
            case 4: self = .canteen
            case 5: self = .library
            case 6: self = .lectureRoom
            case 7: self = .shop
            case 8: self = .gym
            case 9: self = .kitchenArea
            case 10: self = .officeSpace
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        var rawValue: Int {
            switch self {
            case .other: return 0
            case .meetingRoom: return 1
            case .cafeteria: return 2
            case .privateEvent: return 3
            case .canteen: return 4
            case .library: return 5
            case .lectureRoom: return 6
            case .shop: return 7
            case .gym: return 8
            case .kitchenArea: return 9
            case .officeSpace: return 10
            case let .UNRECOGNIZED(i): return i
            }
        }
    }

    init() {}
}

#if swift(>=4.2)

    extension DiaryEntry.VenueType: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [DiaryEntry.VenueType] = [
            .other,
            .meetingRoom,
            .cafeteria,
            .privateEvent,
            .canteen,
            .library,
            .lectureRoom,
            .shop,
            .gym,
            .kitchenArea,
            .officeSpace,
        ]
    }

#endif // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension DiaryEntryWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "DiaryEntryWrapper"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "version"),
        2: .same(proto: "diaryEntries"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.diaryEntries) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if version != 0 {
            try visitor.visitSingularInt32Field(value: version, fieldNumber: 1)
        }
        if !diaryEntries.isEmpty {
            try visitor.visitRepeatedMessageField(value: diaryEntries, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: DiaryEntryWrapper, rhs: DiaryEntryWrapper) -> Bool {
        if lhs.version != rhs.version { return false }
        if lhs.diaryEntries != rhs.diaryEntries { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DiaryEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "DiaryEntry"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "name"),
        2: .same(proto: "location"),
        3: .same(proto: "room"),
        4: .same(proto: "venueType"),
        5: .same(proto: "checkinTime"),
        6: .same(proto: "checkOutTIme"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.location) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.room) }()
            case 4: try { try decoder.decodeSingularEnumField(value: &self.venueType) }()
            case 5: try { try decoder.decodeSingularUInt64Field(value: &self.checkinTime) }()
            case 6: try { try decoder.decodeSingularUInt64Field(value: &self.checkOutTime) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 1)
        }
        if !location.isEmpty {
            try visitor.visitSingularStringField(value: location, fieldNumber: 2)
        }
        if !room.isEmpty {
            try visitor.visitSingularStringField(value: room, fieldNumber: 3)
        }
        if venueType != .other {
            try visitor.visitSingularEnumField(value: venueType, fieldNumber: 4)
        }
        if checkinTime != 0 {
            try visitor.visitSingularUInt64Field(value: checkinTime, fieldNumber: 5)
        }
        if checkOutTime != 0 {
            try visitor.visitSingularUInt64Field(value: checkOutTime, fieldNumber: 6)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: DiaryEntry, rhs: DiaryEntry) -> Bool {
        if lhs.name != rhs.name { return false }
        if lhs.location != rhs.location { return false }
        if lhs.room != rhs.room { return false }
        if lhs.venueType != rhs.venueType { return false }
        if lhs.checkinTime != rhs.checkinTime { return false }
        if lhs.checkOutTime != rhs.checkOutTime { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DiaryEntry.VenueType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "OTHER"),
        1: .same(proto: "MEETING_ROOM"),
        2: .same(proto: "CAFETERIA"),
        3: .same(proto: "PRIVATE_EVENT"),
        4: .same(proto: "CANTEEN"),
        5: .same(proto: "LIBRARY"),
        6: .same(proto: "LECTURE_ROOM"),
        7: .same(proto: "SHOP"),
        8: .same(proto: "GYM"),
        9: .same(proto: "KITCHEN_AREA"),
        10: .same(proto: "OFFICE_SPACE"),
    ]
}
