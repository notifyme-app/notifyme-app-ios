// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ProblematicEvents.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct ProblematicEventWrapper {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var version: Int32 = 0

    var events: [ProblematicEvent] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct ProblematicEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var identity: Data = Data()

    var secretKeyForIdentity: Data = Data()

    var startTime: Int64 = 0

    var endTime: Int64 = 0

    var nonce: Data = Data()

    var message: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProblematicEventWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "ProblematicEventWrapper"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "version"),
        2: .same(proto: "events"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if version != 0 {
            try visitor.visitSingularInt32Field(value: version, fieldNumber: 1)
        }
        if !events.isEmpty {
            try visitor.visitRepeatedMessageField(value: events, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: ProblematicEventWrapper, rhs: ProblematicEventWrapper) -> Bool {
        if lhs.version != rhs.version { return false }
        if lhs.events != rhs.events { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProblematicEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "ProblematicEvent"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "identity"),
        2: .same(proto: "secretKeyForIdentity"),
        3: .same(proto: "startTime"),
        4: .same(proto: "endTime"),
        5: .same(proto: "nonce"),
        6: .same(proto: "message"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBytesField(value: &self.identity) }()
            case 2: try { try decoder.decodeSingularBytesField(value: &self.secretKeyForIdentity) }()
            case 3: try { try decoder.decodeSingularInt64Field(value: &self.startTime) }()
            case 4: try { try decoder.decodeSingularInt64Field(value: &self.endTime) }()
            case 5: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
            case 6: try { try decoder.decodeSingularBytesField(value: &self.message) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !identity.isEmpty {
            try visitor.visitSingularBytesField(value: identity, fieldNumber: 1)
        }
        if !secretKeyForIdentity.isEmpty {
            try visitor.visitSingularBytesField(value: secretKeyForIdentity, fieldNumber: 2)
        }
        if startTime != 0 {
            try visitor.visitSingularInt64Field(value: startTime, fieldNumber: 3)
        }
        if endTime != 0 {
            try visitor.visitSingularInt64Field(value: endTime, fieldNumber: 4)
        }
        if !nonce.isEmpty {
            try visitor.visitSingularBytesField(value: nonce, fieldNumber: 5)
        }
        if !message.isEmpty {
            try visitor.visitSingularBytesField(value: message, fieldNumber: 6)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: ProblematicEvent, rhs: ProblematicEvent) -> Bool {
        if lhs.identity != rhs.identity { return false }
        if lhs.secretKeyForIdentity != rhs.secretKeyForIdentity { return false }
        if lhs.startTime != rhs.startTime { return false }
        if lhs.endTime != rhs.endTime { return false }
        if lhs.nonce != rhs.nonce { return false }
        if lhs.message != rhs.message { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
